class Solution {
public:
    typedef pair<long long, int> P;
    
    int mostBooked(int n, vector<vector<int>>& meetings) {
        int m = meetings.size();
        
        // sort meetings based on their start time
        sort(meetings.begin(), meetings.end());
        
        // roomsUsedCount[i] = how many times ith room is used
        vector<int> roomsUsedCount(n, 0);
        
        priority_queue<P, vector<P>, greater<P>> usedRooms;
        priority_queue<int, vector<int>, greater<int>> availableRooms;
        
        for(int room = 0; room < n; room++) {
            availableRooms.push(room);
        }
        
        for(vector<int>& meet : meetings) {
            int start = meet[0];
            int end   = meet[1];
            int duration = end - start;
            
            // before starting this cur meet which rooms can be made available
            while(!usedRooms.empty() && usedRooms.top().first <= start) {
                int room = usedRooms.top().second;
                usedRooms.pop();
                availableRooms.push(room);
            }
            
            if(!availableRooms.empty()) {
                int room = availableRooms.top();
                availableRooms.pop();
                usedRooms.push({end, room});
                roomsUsedCount[room]++;
            }
            else {
                // we dont have any available rooms now
                int room = usedRooms.top().second;
                long long endTime = usedRooms.top().first;
                usedRooms.pop();
                
                usedRooms.push({endTime + duration, room});
                roomsUsedCount[room]++;
                
            }
        }
        
        int resultRoom = -1;
        int maxUsed    = -1;
        
        for(int room = 0; room < n; room++) {
            if(roomsUsedCount[room] > maxUsed) {
                maxUsed    = roomsUsedCount[room];
                resultRoom = room;
            }
        }
        
        return resultRoom;
    }
};
