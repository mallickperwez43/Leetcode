/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;

        // Slow fast algo -> Flyod algo
        while(fast != NULL && fast -> next != NULL) {
            slow = slow -> next;
            fast = fast -> next -> next;

            if(slow == fast) {
                // cycle
                break;
            }
        }

        // no cycle
        if(fast == NULL || fast -> next == NULL) {
            return NULL;
        }

        // reset fast to head and move again until both meet
        fast = head;
        while(fast != slow) {
            fast = fast -> next; 
            slow = slow -> next; 
        }

        return fast; // slow any of them
    }
};

// TC : O(n)
// SC : O(1)
