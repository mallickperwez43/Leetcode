// DFS

class Solution {
public:
    
    void dfs(vector<int>& edges, int node, vector<int>& dist, vector<bool>& visited) {
        visited[node] = true;

        int v = edges[node];

        if(v != -1 && !visited[v]) {
            visited[v] = true;
            dist[v] = dist[node] + 1;
            dfs(edges, v, dist, visited);
        }
    }

    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();

        vector<int> dist1(n, INT_MAX);
        vector<int> dist2(n, INT_MAX);

        vector<bool> visited1(n, false);
        vector<bool> visited2(n, false);

        dist1[node1] = 0;
        dist2[node2] = 0;

        dfs(edges, node1, dist1, visited1);
        dfs(edges, node2, dist2, visited2);

        int minDistNode = -1;
        int minDist     = INT_MAX;

        for(int i = 0; i < n; i++) {
            
            int maxD = max(dist1[i], dist2[i]);

            if(minDist > maxD) {
                minDist = maxD;
                minDistNode = i;
            }
        
        }

        return minDistNode;
    }
};


// BFS 

class Solution {
public:
    
    void bfs(vector<int>& edges, int node, vector<int>& dist, int n) {
        queue<int> q;
        vector<bool> visited(n, false);
        
        q.push(node);
        dist[node] = 0;
        visited[node] = true;

        while(!q.empty()) {

            int u = q.front();
            q.pop();

            int v = edges[u];

            if(v != -1 && !visited[v]) {
                visited[v] = true;
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }

    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();

        vector<int> dist1(n, INT_MAX);
        vector<int> dist2(n, INT_MAX);

        bfs(edges, node1, dist1, n);
        bfs(edges, node2, dist2, n);

        int minDistNode = -1;
        int minDist     = INT_MAX;

        for(int i = 0; i < n; i++) {
            
            int maxD = max(dist1[i], dist2[i]);

            if(minDist > maxD) {
                minDist = maxD;
                minDistNode = i;
            }
        
        }

        return minDistNode;
    }
};
