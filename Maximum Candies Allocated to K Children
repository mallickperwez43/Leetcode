// BRUTE FORCE
class Solution {
public:
    int maximumCandies(vector<int>& candies, long long k) {
        int n = candies.size();

        int maxC = 0;
        int total = 0;
        for(int i = 0; i < n; i++) {
            total += candies[i];
            maxC = max(maxC, candies[i]);
        }

        if(total < k) {
            return 0;
        }

        // Brute force try from maxC till 1 candy
        for(int c = maxC; c >= 1; c--) {
            long long count = 0;

            for(int i = 0; i < candies.size(); i++) {
                count += candies[i] / c; // how many children can get c candies from this pile
            }

            if(count >= k) {
                return c;
            }
        }

        return 0;
    }
};


// Binary Search on Answers
class Solution {
public:
    bool canDistribute(vector<int> candies, int mid, long long k) {
        int n = candies.size();

        for(int i = 0; i < n; i++) {
            k -= candies[i] / mid;

            if(k <= 0) { // all children got mid no of candies
                return true; // early return
            }
        }

        return k <= 0; // all children got mid no of candies
    }
    
    int maximumCandies(vector<int>& candies, long long k) {
        int n = candies.size();

        int maxC = 0;
        long long total = 0;
        for(int i = 0; i < n; i++) {
            total += candies[i];
            maxC = max(maxC, candies[i]);
        }

        if(total < k) {
            return 0;
        }
        
        int l = 1;
        int r = maxC;
        int result = 0;

        while(l <= r) { // O(log(maxC))
            int mid = l + (r - l) / 2;

            if(canDistribute(candies, mid, k)) { // O(n)
                result = mid;
                l = mid + 1;
            }
            else {
                r = mid - 1;
            }
        }

        return result;
    }
};

// TC : O(log(maxC) * n)
// SC : O(1)
