// BRUTE FORCE  --> TLE
class Solution {
public:
    int getDigitSum(int num) {
        int sum = 0;

        while(num > 0) {
            sum += (num % 10);

            num /= 10;
        }

        return sum;
    }
    
    int maximumSum(vector<int>& nums) {
        int n = nums.size();
        int result = -1;

        for(int i = 0l i < n; i++) {
            int digitSumi = getDigitSum(nums[i]);

            for(int j = i + 1; j < n; j++) {
                int digitSumj = getDigitSum(nums[j]);

                if(digitSumi == digitSumj) {
                    result = max(result, nums[i] + nums[j]);
                }
            }
        }

        return result;
    }
};

// TC : O(n*n*k)
// SC : O(1)


// BETTER
class Solution {
public:
    int getDigitSum(int num) {
        int sum = 0;

        while(num > 0) {
            sum += (num % 10);

            num /= 10;
        }

        return sum;
    }
    
    int maximumSum(vector<int>& nums) {
        int n = nums.size();
        int result = -1;

        unordered_map<int, int> mp;

        for(int i = 0; i < n; i++) {
            int digitSum = getDigitSum(nums[i]);

            if(mp.count(digitSum)) {
                result = max(result, nums[i] + mp[digitSum]);
            }

            mp[digitSum] = max(mp[digitSum], nums[i]);
        }

        return result;
    }
};

// TC : O(n*k)
// SC : O(n)


// BETTER 2
class Solution {
public:
    int getDigitSum(int num) {
        int sum = 0;

        while(num > 0) {
            sum += (num % 10);

            num /= 10;
        }

        return sum;
    }
    
    int maximumSum(vector<int>& nums) {
        int n = nums.size();
        int result = -1;

        int mp[82] = {0};

        for(int i = 0; i < n; i++) {
            int digitSum = getDigitSum(nums[i]);

            if(mp[digitSum]) {
                result = max(result, nums[i] + mp[digitSum]);
            }

            mp[digitSum] = max(mp[digitSum], nums[i]);
        }

        return result;
    }
};

// TC : O(n*k)
// SC : O(82)


// SORTING
class Solution {
public:
    int getDigitSum(int num) {
        int sum = 0;

        while(num > 0) {
            sum += (num % 10);

            num /= 10;
        }

        return sum;
    }
    
    int maximumSum(vector<int>& nums) {
        int n = nums.size();
        int result = -1;

        vector<pair<int, int>> arr;

        for(int i = 0; i < n; i++) {
            int digitSum = getDigitSum(nums[i]);

            arr.push_back(make_pair(digitSum, nums[i]));
        }

        sort(arr.begin(), arr.end());

        for(int i = 1; i < n; i++) {
            if(arr[i].first == arr[i - 1].first) {
                result = max(result, arr[i].second + arr[i - 1].second);
            }
        }

        return result;
    }
};

// TC : O(n*logn)
// SC : O(n)
