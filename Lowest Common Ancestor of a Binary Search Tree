/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */


// RECURSIVE
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL){
            return NULL;
        }

        if (root->val == p->val || root->val == q->val) {
            return root;
        }

        if((p -> val < root -> val && q -> val > root -> val) || (p -> val > root -> val && q -> val < root -> val)){
            return root;
        }
        else if(p -> val < root -> val && q -> val < root -> val){
            return lowestCommonAncestor(root -> left, p, q);
        }
        else{
            return lowestCommonAncestor(root -> right, p, q);
        }
    }
};

// ITERATIVE
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int small = min(p -> val, q -> val);
        int large = max(p -> val, q -> val);

        while(root){
            if(root -> val > large){ // go to left
                root = root -> left;
            }
            else if(root -> val < small){ // go to right
                root = root -> right;
            }
            else{ // small <= root <= large
                return root;
            }
        }

        return NULL;
    }
};
