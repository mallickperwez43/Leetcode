// MAP APPROACH

class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        map<int, int> mp; // id -> val
        for(vector<int>& num : nums1) {
            int id  = num[0];
            int val = num[1];
            mp[id] += val;
        }

        for(vector<int>& num : nums2) {
            int id  = num[0];
            int val = num[1];
            mp[id] += val;
        }
        
        vector<vector<int>> result;

        for(auto it : mp) {
            vector<int> cur;
            int id = it.first;
            int val = it.second;
            cur.push_back(id);
            cur.push_back(val);

            result.push_back(cur);
        }

        return result;
    }
};

// TWO POINTER APPROACH

class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        vector<vector<int>> result;

        int i = 0; // nums1
        int j = 0; // nums2

        while(i < nums1.size() && j < nums2.size()) {
            int id1  = nums1[i][0];
            int val1 = nums1[i][1];
            int id2  = nums2[j][0];
            int val2 = nums2[j][1];

            if(id1 < id2) {
                result.push_back({id1, val1});
                i++;
            }
            else if(id2 < id1) {
                result.push_back({id2, val2});
                j++;
            }
            else {
                result.push_back({id1, val1 + val2});
                i++;
                j++;
            }
        }

        while(i < nums1.size()) {
            result.push_back(nums1[i]);
            i++;
        }

        while(j < nums2.size()) {
            result.push_back(nums2[j]);
            j++;
        }

        return result;
    }
};
