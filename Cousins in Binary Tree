/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void getParentAndDepth(TreeNode* node, TreeNode* parent, int curDepth, int& nodeDepth, TreeNode*& nodeParent, int nodeVal) {
        if(node == NULL) return;

        if(node -> val == nodeVal){
            nodeDepth = curDepth;
            nodeParent = parent;
            return;
        }

        getParentAndDepth(node -> left, node, curDepth + 1, nodeDepth, nodeParent, nodeVal);
        getParentAndDepth(node -> right, node, curDepth + 1, nodeDepth, nodeParent, nodeVal);
    }

    bool isCousins(TreeNode* root, int x, int y) {
        if(root == NULL) return false;

        int xDepth = -1;
        int yDepth = -1;
        TreeNode* xParent = NULL;
        TreeNode* yParent = NULL;

        getParentAndDepth(root, NULL, 0, xDepth, xParent, x);
        getParentAndDepth(root, NULL, 0, yDepth, yParent, y);

        return ((xDepth == yDepth) && (xParent != yParent));
    }
};
