class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        unordered_set<int> sadUsers;

        for(auto& friends : friendships) {
            // convert to zero based indexing
            int u = friends[0] - 1;
            int v = friends[1] - 1;
            
            unordered_set<int> langSet(languages[u].begin(), languages[u].end());
            bool canTalk = false;
            for(int& lang : languages[v]) {
                if(langSet.count(lang)) {
                    canTalk = true; 
                    break;
                }
            }

            if(!canTalk) {
                sadUsers.insert(u);
                sadUsers.insert(v);
            }
        }

        // find max know language amoung sad users
        vector<int> languageCnt(n + 1, 0);
        int mostKnowLang = 0;
        for(int user : sadUsers) {
            for(int& lang : languages[user]) {
                languageCnt[lang]++;
                mostKnowLang = max(mostKnowLang, languageCnt[lang]);
            }
        }

        return sadUsers.size() - mostKnowLang;
    }
};

// TC : O(F * L)
// SC : O(F + n)
