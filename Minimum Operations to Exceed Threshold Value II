class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        priority_queue<long, vector<long>, greater<long>> pq(nums.begin(), nums.end()); // heapify - log(n)

        int count = 0;

        while(!pq.empty() && pq.top() < k) { // O(n)
            long smallest = pq.top();
            pq.pop(); // O(logn)

            long secondSmallest = pq.top();
            pq.pop(); // O(logn)

            pq.push(smallest * 2 + secondSmallest); // O(logn)

            count++;
        }

        return count;
    }
};

// TC : O(n + n * 3 * logn) ~ O(n + nlogn) 
// SC : O(n)
