// BRUTE FORCE

class Solution {
public:
    int numberOfPairs(vector<vector<int>>& points) {
        int n = points.size();
        int result = 0;

        for(int i = 0; i < n; i++) {
            // A - upper point
            int x1 = points[i][0];
            int y1 = points[i][1];
            
            // find B lower or lower right
            for(int j = 0; j < n; j++) {
                if(i == j)
                    continue;
                
                int x2 = points[j][0];
                int y2 = points[j][1];

                if(x1 <= x2 && y1 >= y2) {
                    
                    bool hasPointInside = false;

                    for(int k = 0; k < n; k++) {
                        if(k == i || k == j)
                            continue;
                        
                        int x3 = points[k][0];
                        int y3 = points[k][1];

                        if(x3 >= x1 && x3 <= x2 && y3 <= y1 && y3 >= y2) {
                            hasPointInside = true;
                            break;
                        }
                    }

                    if(!hasPointInside) {
                        result++;
                    }
                }
            }
        }

        return result;
    }
};

// TC : O(n ^ 3)
// SC : O(1)


// BETTER

class Solution {
public:
    int numberOfPairs(vector<vector<int>>& points) {
        int n = points.size();
        int result = 0;
        
        sort(points.begin(), points.end(), [&](vector<int> p1, vector<int> p2){
            if(p1[0] == p2[0]) {
                return p1[1] > p2[1];
            }

            return p1[0] < p2[0];
        });

        for(int i = 0; i < n; i++) {
            // A - upper point
            int x1 = points[i][0];
            int y1 = points[i][1];
            
            int maxY = INT_MIN;
            // Find B - lower or lower right
            for(int j = i + 1; j < n; j++) {
                
                int x2 = points[j][0];
                int y2 = points[j][1];

                if(y2 > y1) { // uper chala gaya A se
                    continue;
                }

                if(y2 > maxY) {
                    result++;
                    maxY = y2;
                }
            }
        }

        return result;
    }
};

// TC : O(nlogn + n ^ 2)
// SC : O(1)
