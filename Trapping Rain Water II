class Solution {
public:
    typedef pair<int, pair<int, int>> PP; // {height, {i, j}} 

    vector<vector<int>> directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};

    int trapRainWater(vector<vector<int>>& heightMap) {
        int m = heightMap.size();
        int n = heightMap[0].size();

        priority_queue<PP, vector<PP>, greater<PP>> pq; // min heap {height, {i, j}}

        vector<vector<bool>> visited(m, vector<bool>(n ,false));

        // left most column and right most column (0, n - 1)
        for(int row = 0; row < m; row++) {
            for(int col : {0, n - 1}) {
                pq.push({heightMap[row][col], {row, col}});
                visited[row][col] = true;
            }
        }
        
        // top most row and bottom most row (0, m - 1)
        for(int col = 0; col < n; col++) {
            for(int row : {0, m - 1}) {
                pq.push({heightMap[row][col], {row, col}});
                visited[row][col] = true;
            }
        }

        int water = 0;

        while(!pq.empty()) {
            PP cur = pq.top();
            pq.pop();

            int height = cur.first;
            int i      = cur.second.first;
            int j      = cur.second.second;
            
            // find neighbours
            for(vector<int>& dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && !visited[i_][j_]) {
                    water += max(height - heightMap[i_][j_], 0);

                    pq.push({max(height, heightMap[i_][j_]), {i_, j_}});

                    visited[i_][j_] = true;
                }
            }
        }

        return water;
    }
};

// TC : O(m * n * log(m * n));
// SC : O(m * n)
