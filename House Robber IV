// Recusion + Memoization --> TLE
class Solution {
public:
    int n;
    int solve(vector<int>& nums, int i, int k, vector<vector<int>>& dp) {
        // base case
        if(k == 0) {
            return 0; // no more houses to be covered
        }

        if(i >= n) {
            return INT_MAX;
        }

        // recursion
        int take = max(nums[i], solve(nums, i + 2, k - 1, dp));

        int no_take = solve(nums, i + 1, k, dp);

        return dp[i][k] = min(take, no_take); 
    }

    int minCapability(vector<int>& nums, int k) {
        n = nums.size();
        
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, -1));

        return solve(nums, 0, k, dp);
    }
};

// TC : O(n * k)
// SC : O(n * k)


// Binary Search On Answer
class Solution {
public:
    int isPossible(vector<int>& nums, int mid, int k) {
        int house = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] <= mid) {
                house++;
                i++; // skipping adjacent house
            }
        }

        return house >= k; // we managed to rob atleast k houses
    }

    int minCapability(vector<int>& nums, int k) {
        int n = nums.size();

        int l = *min_element(nums.begin(), nums.end());
        int r = *max_element(nums.begin(), nums.end());
        
        int result = r;

        while(l <= r) {
            int mid = l + (r - l) / 2; // capability

            if(isPossible(nums, mid, k) == true) {
                result = mid;
                r = mid - 1;
            }
            else {
                l = mid + 1;
            }
        }

        return result;
    }
};

// TC : O(log(maxC) * n)
// SC : O(1)
