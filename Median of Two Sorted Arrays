// BRUTE FORCE

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();

        vector<int> temp(m + n); 

        int i = 0; // nums1
        int j = 0; // nums2

        int k = 0; // temp

        while(i < m && j < n) {
            if(nums1[i] < nums2[j]) {
                temp[k++] = nums1[i++];
            }
            else {
                temp[k++] = nums2[j++];
            }
        }

        while(i < m) {
            temp[k++] = nums1[i++];
        }

        while(j < n) {
            temp[k++] = nums2[j++];
        }

        int size = m + n;

        if(size & 1) {
            return temp[size / 2] * 1.0;
        }

        return (temp[size / 2] + temp[(size / 2) - 1]) / 2.0;
    }
};

// TC : O(m + n)
// SC : O(m + n)


// BETTER

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();

        int size = m + n;

        int idx1 = (size / 2) - 1;
        int element1 = -1; 
        
        int idx2 = (size / 2);
        int element2 = -1; 

        int i = 0; // nums1
        int j = 0; // nums2

        int k = 0; 

        while(i < m && j < n) {

            if(nums1[i] < nums2[j]) {
                
                if(k == idx1) {
                    element1 = nums1[i];
                }
                if(k == idx2) {
                    element2 = nums1[i];
                }
                i++;
            }
            else {
                if(k == idx1) {
                    element1 = nums2[j];
                }
                if(k == idx2) {
                    element2 = nums2[j];
                }
                j++;
            }

            k++;
        }

        while(i < m) {
            if(k == idx1) {
                element1 = nums1[i];
            }
            if(k == idx2) {
                element2 = nums1[i];
            }
            i++;
            k++;
        }

        while(j < n) {
            if(k == idx1) {
               element1 = nums2[j];
            }
            if(k == idx2) {
                element2 = nums2[j];
            }
            j++;
            k++;
        }

        if(size & 1) {
            return element2 * 1.0;
        }

        return (element1 + element2) / 2.0;
    }
};

// TC : O(m + n)
// SC : O(1)


// OPTIMAL

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        if(nums1.size() > nums2.size()) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int m = nums1.size();
        int n = nums2.size();

        int l = 0;
        int r = m;

        while(l <= r) {

            int Px = l + (r - l) / 2; // mid - No of el from nums1
            int Py = (m + n + 1) / 2 - Px; // No of el from nums2
            
            // Left half
            int x1 = (Px == 0) ? INT_MIN : nums1[Px - 1];
            int x2 = (Py == 0) ? INT_MIN : nums2[Py - 1];
            
            // Right half
            int x3 = (Px == m) ? INT_MAX : nums1[Px];
            int x4 = (Py == n) ? INT_MAX : nums2[Py];

            if(x1 <= x4 && x2 <= x3) {

                if((m + n) & 1) {
                    return max(x1, x2);
                }

                return (max(x1, x2) + min(x3, x4)) / 2.0;
            }

            if(x1 > x4) {
                r = Px - 1;
            }
            else {
                l = Px + 1;
            }
        }

        return -1;
    }
};

// TC : O(log(min(m, n)))
// SC : O(1)
