// Recursion 

class Solution {
public:
    void solve(int idx, vector<int>& nums, vector<int>& result, vector<int>& temp, int prev) {
        
        // base case
        if(idx >= nums.size()) {
            if(temp.size() > result.size()) {
                result = temp;
            }

            return;
        }

        // take
        if(prev == -1 || nums[idx] % prev == 0) {
            temp.push_back(nums[idx]); // take  
            solve(idx + 1, nums, result, temp, nums[idx]);
            temp.pop_back(); // remove for not take
        } 

        // not take
        solve(idx + 1, nums, result, temp, prev);
    }
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        vector<int> result;
        vector<int> temp;
        
        int prev = -1;
        solve(0, nums, result, temp, prev);     

        return result; 
    }
};



// YEH TOH LIS KA VARIANT NIKLA 
// {3, 18, 15, 32, 64}
// {3, 15, 18, 32, 64} -> sorted

// result -> {3, 15} | {3, 18} | {32, 64}
// 3 aaya to next kya tha prev se bada aur usse divisible hona chahiye


// LIS VARIANT

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        vector<int> dp(n, 1);

        vector<int> prev_idx(n, -1);

        int last_chosen_index = 0;
        int maxL = 1;

        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {

                if(nums[i] % nums[j] == 0) {

                    if(dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                        prev_idx[i] = j;
                    }

                    if(dp[i] > maxL) {
                        maxL = dp[i];
                        last_chosen_index = i;
                    }
                }
            }
        }

        vector<int> result;
        while(last_chosen_index != -1) {
            result.push_back(nums[last_chosen_index]);
            last_chosen_index = prev_idx[last_chosen_index];
        }

        reverse(result.begin(), result.end());

        return result;
    }
};


// TC : O(n * n)
// SC : O(n)
