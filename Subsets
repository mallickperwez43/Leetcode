class Solution {
private:
    void solve(vector<int> nums, vector<int> output, int index, vector<vector<int>>& ans){
        //base case
        if(index >= nums.size()){
            ans.push_back(output);
            return;
        }

        //exclude
        solve(nums, output, index + 1, ans);

        //include
        int element = nums[index];
        output.push_back(element);
        solve(nums, output, index + 1, ans);
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
       vector<vector<int>> ans;
       vector<int> output;
       int index = 0;
       solve(nums, output, index, ans);
       return ans; 
    }
};

// way 2

class Solution {
private:
    void backtrack(int start, vector<int> &nums, vector<int> &tempList, vector<vector<int>> &list){
        list.push_back(tempList);

        for(int i = start; i < nums.size(); i++){
            // add to temp list
            tempList.push_back(nums[i]);
            // recursive call
            backtrack(i + 1, nums, tempList, list);
            // backtrack
            tempList.pop_back();
        }
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> list;
        vector<int> tempList;

        backtrack(0, nums, tempList, list);

        return list;
    }
};
