/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& in){
        if(root == NULL){
            return;
        }

        inorder(root -> left, in);
        in.push_back(root -> val);
        inorder(root -> right, in);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> in;

        inorder(root, in);

        return in[k - 1];
    }
};

// TC : O(n)
// SC : O(n)

// Method 2 : inorder and count while coming back
class Solution {
public:
    void inorder(TreeNode* root, int& cnt, int& node, int k){
        if(root == NULL){
            return;
        }

        inorder(root -> left, cnt, node, k);
        
        cnt++;
        if(cnt == k){
            node = root -> val;
            return;
        }

        inorder(root -> right, cnt, node, k);
    }

    int kthSmallest(TreeNode* root, int k) {
        int node;
        int cnt = 0;

        inorder(root, cnt, node, k);

        return node;
    }
};

// TC : O(n)
// SC : O(1)
