class Solution {
public:
    
    char DFSFindMinChar(char curCh, vector<int>& visited, unordered_map<char, vector<char>>& adj) {
        visited[curCh - 'a'] = 1; // mark visited

        char minCh = curCh;

        for(char& ngbrCh : adj[curCh]) {
            if(!visited[ngbrCh - 'a']) {
                minCh = min(minCh, DFSFindMinChar(ngbrCh, visited, adj));
            }
        }

        return minCh;
    }

    string smallestEquivalentString(string s1, string s2, string baseStr) {
        int n = s1.length();

        unordered_map<char, vector<char>> adj;

        for(int i = 0; i < n; i++) {
            char u = s1[i];
            char v = s2[i];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        string result;

        for(char& ch : baseStr) {
            vector<int> visited(26, 0);

            char minChar = DFSFindMinChar(ch, visited, adj);

            result.push_back(minChar);
        }

        return result;
    }
};
