// SORT + BINARY SEARCH 

class Solution {
public:
    
    int binarySearch(vector<int>& nums, int low, int high, int target) {
        int result = -1;

        while(low <= high) {
            int mid = low + (high - low) / 2;

            if(nums[mid] < target) {
                result = mid;
                low = mid + 1;
            }
            else {
                high = mid - 1;
            } 
        }

        return result;
    }

    int triangleNumber(vector<int>& nums) {
        int n = nums.size();

        if(n < 3) {
            return 0;
        }

        sort(nums.begin(), nums.end());

        int count = 0;

        for(int i = 0; i <= n - 3; i++) {
            if(nums[i] == 0)
                continue;

            for(int j = i + 1; j <= n - 2; j++) {
                int sum = nums[i] + nums[j];

                int k = binarySearch(nums, j + 1, n - 1, sum);
                if(k != -1) {
                    count += (k - j);
                }
            }
        } 

        return count;
    }
};

// TC : O(n ^ 2 * logn)
// SC : O(1)


// SORT + TWO POINTER

class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int n = nums.size();

        if(n < 3) 
            return 0;
        
        sort(nums.begin(), nums.end());

        int count = 0;

        for(int k = n - 1; k >= 2; k--) {
            int i = 0;
            int j = k - 1;

            // nums[i] + nums[j] > nums[k]
            while(i < j) {
                int sum = nums[i] + nums[j];

                if(sum > nums[k]) {
                    count += (j - i);
                    j--;
                }
                else 
                    i++;
            }
        }

        return count;
    }
};

// TC : O(n^2)
// SC : O(1)
