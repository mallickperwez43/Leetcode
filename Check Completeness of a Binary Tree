// APPROACH 1 : BFS

class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        // Using BFS

        queue<TreeNode*> q;
        q.push(root);

        bool past = false; // have seen NULL node in past

        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();

            if(node == NULL){
                past = true;
            }
            else{
                if(past == true){
                    return false;
                }
                
                q.push(node -> left);
                q.push(node -> right);
            }
        }

        return true;
    }
};

// APPROACH 2 : DFS

class Solution {
public:
    int countNodes(TreeNode* root){
        if(root == NULL){
            return 0;
        }

        return 1 + countNodes(root -> left) + countNodes(root -> right);
    }

    bool dfs(TreeNode* root, int idx, int totalNodes){
        if(root == NULL)
            return true;
        
        if(idx > totalNodes)
            return false;
        
        return dfs(root -> left, 2 * idx, totalNodes) && 
               dfs(root -> right, 2 * idx + 1, totalNodes);
    }

    bool isCompleteTree(TreeNode* root) {
        // Using DFS

        int totalNodes = countNodes(root);
        
        int index = 1;
        return dfs(root, index, totalNodes);
    }
};
