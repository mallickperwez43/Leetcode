class Solution {
public:
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    typedef pair<int, pair<int, int>> P;
    
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n = moveTime.size();      
        int m = moveTime[0].size(); 

        vector<vector<int>> result(n, vector<int>(m, INT_MAX));
        priority_queue<P, vector<P>, greater<P>> pq;

        result[0][0] = 0;
        pq.push({0, {0, 0}});

        while(!pq.empty()) {           
            int curTime = pq.top().first;
            int i       = pq.top().second.first;
            int j       = pq.top().second.second;
            
            pq.pop();

            // check if reached dest
            if(i == n - 1 && j == m - 1) {
                return curTime;
            }

            for(auto& dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < n && j_ >= 0 && j_ < m) {
                    int moveCost    = ((i_ + j_) & 1) ? 1 : 2;
                    int wait        = max(moveTime[i_][j_] - curTime, 0);
                    int arrivalTime = curTime + wait + moveCost;

                    if(result[i_][j_] > arrivalTime) {
                        result[i_][j_] = arrivalTime;
                        pq.push({arrivalTime, {i_, j_,}});
                    } 
                }
            }
        }     

        return -1;
    }
};
