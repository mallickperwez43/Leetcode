// Normal backtracking

class Solution {
public:

    bool isSubsequence(string& s, string& sub, int k) {
        int i = 0;
        int j = 0;
        int L = sub.length();
        int n = s.length();

        while(i < n && j < k * L) {
            if(s[i] == sub[j % L]) 
                j++;
            
            i++;
        }

        return j == k * L;
    }

    void backtracking(string& s, string& cur, vector<bool>& canUse, vector<int>& requiredFreq, int k, int maxLen, string& result) {
        if(cur.length() > maxLen)
            return;
        
        if((cur.length() > result.length() || (cur.length() == result.length() && cur > result))
           && isSubsequence(s, cur, k)) {
            result = cur;
        }

        for(int i = 0; i < 26; i++) {
            if(canUse[i] == false || requiredFreq[i] == 0) 
                continue;
            
            // Do
            char ch = i + 'a';
            cur.push_back(ch);
            requiredFreq[i]--;

            // Explore
            backtracking(s, cur, canUse, requiredFreq, k, maxLen, result);

            // Undo
            cur.pop_back();
            requiredFreq[i]++;
        }
    }
    
    string longestSubsequenceRepeatedK(string s, int k) {
        int n = s.length();

        vector<int> freq(26, 0);
        for(char& ch : s) {
            freq[ch - 'a']++;
        }

        vector<bool> canUse(26, false);
        vector<int> requiredFreq(26, 0);
        for(int i = 0; i < 26; i++) {
            if(freq[i] >= k) {
                canUse[i] = true;
                requiredFreq[i] = freq[i] / k; // at most this char can be used in a subsequence
            }
        }

        int maxLen = n / k;

        string result = "";
        string cur;
        backtracking(s, cur, canUse, requiredFreq, k, maxLen, result);

        return result;
    }
};


// Improved Backtracking by greadily taking the longest subsequence

class Solution {
public:

    bool isSubsequence(string& s, string& sub, int k) {
        int i = 0;
        int j = 0;
        int L = sub.length();
        int n = s.length();

        while(i < n && j < k * L) {
            if(s[i] == sub[j % L]) 
                j++;
            
            i++;
        }

        return j == k * L;
    }

    bool backtracking(string& s, string& cur, vector<bool>& canUse, vector<int>& requiredFreq, int k, int maxLen, string& result) {
        if(cur.length() == maxLen) {
            if(isSubsequence(s, cur, k)) {
                result = cur;
                return true;
            }
            return false;
        }

        for(int i = 25; i >= 0; i--) {
            if(canUse[i] == false || requiredFreq[i] == 0) 
                continue;
            
            // Do
            char ch = i + 'a';
            cur.push_back(ch);
            requiredFreq[i]--;

            // Explore
            if(backtracking(s, cur, canUse, requiredFreq, k, maxLen, result) == true) {
                return true;
            }

            // Undo
            cur.pop_back();
            requiredFreq[i]++;
        }

        return false;
    }
    
    string longestSubsequenceRepeatedK(string s, int k) {
        int n = s.length();

        vector<int> freq(26, 0);
        for(char& ch : s) {
            freq[ch - 'a']++;
        }

        vector<bool> canUse(26, false);
        vector<int> requiredFreq(26, 0);
        for(int i = 0; i < 26; i++) {
            if(freq[i] >= k) {
                canUse[i] = true;
                requiredFreq[i] = freq[i] / k; // at most this char can be used in a subsequence
            }
        }

        int maxLen = n / k;
        string result = "";

        for(int len = maxLen; len >= 0; len--) {    
            string cur = "";
            vector<int> tempRequiredFreq = requiredFreq;
            if(backtracking(s, cur, canUse, tempRequiredFreq, k, len, result) == true) {
                return result;
            }
        }
        return result;
    }
};

// TC 
// n / k maximum length subsequence
// n -> n issubsequence
// (n / k)! -> bactracking generating subsequence

// TC: O(n * (n / k)!)
// SC : O(n / k)
