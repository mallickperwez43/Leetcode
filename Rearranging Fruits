// way 1

class Solution {
public:
    long long minCost(vector<int>& basket1, vector<int>& basket2) {
        unordered_map<int, int> mp;
        int minEl = INT_MAX; // minimum element based on the both the baskets

        for(int& x : basket1) {
            mp[x]++;
            minEl = min(minEl, x);
        }

        for(int& x : basket2) {
            mp[x]--;
            minEl = min(minEl, x);
        }

        vector<int> finalList;
        for(auto& it : mp) {
            int cost  = it.first;
            int count = it.second;

            if(count == 0)
                continue;

            if(count % 2 != 0) {
                return -1;
            }  

            for(int c = 1; c <= abs(count) / 2; c++) {
                finalList.push_back(cost);
            }
        }

        sort(finalList.begin(), finalList.end());

        long long result = 0;
        for(int i = 0; i < finalList.size() / 2; i++) {
            result += min(finalList[i], minEl * 2);
        } 

        return result;
    }
};


// slight improvement

class Solution {
public:
    long long minCost(vector<int>& basket1, vector<int>& basket2) {
        unordered_map<int, int> mp;
        int minEl = INT_MAX; // minimum element based on the both the baskets

        for(int& x : basket1) {
            mp[x]++;
            minEl = min(minEl, x);
        }

        for(int& x : basket2) {
            mp[x]--;
            minEl = min(minEl, x);
        }

        vector<int> finalList;
        for(auto& it : mp) {
            int cost  = it.first;
            int count = it.second;

            if(count == 0)
                continue;

            if(count % 2 != 0) {
                return -1;
            }  

            for(int c = 1; c <= abs(count) / 2; c++) {
                finalList.push_back(cost);
            }
        }

        // sort(finalList.begin(), finalList.end()); 
        // we are only concerned with n / 2 elements so why sorting whole array
        nth_element(finalList.begin(), finalList.begin() + finalList.size() / 2, finalList.end()); // agar n/2 tak array sorted hota toh konsa element hota

        long long result = 0;
        for(int i = 0; i < finalList.size() / 2; i++) {
            result += min(finalList[i], minEl * 2);
        } 

        return result;
    }
};
