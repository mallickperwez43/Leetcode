// approach 1

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        
        auto lambdaP = [](int num) {
            return num > 0;
        };

        auto lambdaN = [](int num) {
            return num < 0;
        };

        int countPositive = count_if(nums.begin(), nums.end(), lambdaP);
        int countNegative = count_if(nums.begin(), nums.end(), lambdaN);

        return max(countPositive, countNegative);
    }
};

// TC : O(n)
// SC : O(1)



// follow up

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int n = nums.size();

        int firstPos  = lower_bound(nums.begin(), nums.end(), 1) - nums.begin();
        int firstZero = lower_bound(nums.begin(), nums.end(), 0) - nums.begin();

        return max(n - firstPos, firstZero);
    }
};

// TC : O(logn)
// SC : O(1)
