// Method 1 

class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int n = nums.size();

        long long result = 0;

        unordered_map<int, int> mp; // nums[i] - i -> freq
        mp[nums[0]] = 1;

        for(int j = 1; j < n; j++) {
            int countOfNumsj = mp[nums[j] - j];

            int totalNumsBeforej = j;

            int badPairs = totalNumsBeforej - countOfNumsj;

            result += badPairs;

            mp[nums[j] - j]++;
        }

        return result;
    }
};

// TC : O(n)
// SC : O(n)


// Method 2

class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int n = nums.size();

        long long result = 0;

        unordered_map<int, int> mp; // nums[i] - i -> freq
        // nums[i] - i

        for(int j = 0; j < n; j++) {
            int diff = nums[j] - j;

            int goodPairs = mp[diff];

            int totalPairsInPast = j;

            result += totalPairsInPast - goodPairs;

            mp[diff]++;
        }

        return result;
    }
};

// TC : O(n)
// SC : O(n)


// Method 3

class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        long long n = nums.size();
        
        unordered_map<int, int> mp; // nums[i] - i -> freq
        // nums[i] - i
        
        long long goodPairs = 0;
        
        long long totalPairs = (n * (n - 1)) / 2;

        for(int j = 0; j < n; j++) {
            int key = nums[j] - j;

            goodPairs += mp[key];

            mp[key]++;
        }

        return totalPairs - goodPairs;
    }
};

// TC : O(n)
// SC : O(n)
