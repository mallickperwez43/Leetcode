// STL sort and extra string

class Solution {
public:
    bool isVowel(char ch) {
        ch = tolower(ch);

        return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'); 
    }

    string sortVowels(string s) {
        string temp;
        for(char& ch : s) {
            if(isVowel(ch)) {
                temp.push_back(ch);
            }
        }

        sort(temp.begin(), temp.end());

        int j = 0; // temp

        for(int i = 0; i < s.length(); i++) {
            if(isVowel(s[i])) {
                s[i] = temp[j];
                j++;
            }
        }

        return s;
    }
};


// map of vowel and sorted fashion available vowel (Counting sort)
class Solution {
public:
    bool isVowel(char ch) {
        ch = tolower(ch);

        return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'); 
    }

    string sortVowels(string s) {
        unordered_map<char, int> mp;

        for(char& ch : s) {
            if(isVowel(ch)) {
                mp[ch]++;
            }
        }

        string temp = "AEIOUaeiou";
        int j = 0;

        for(int i = 0; i < s.length(); i++) {
            if(isVowel(s[i])) {
                // vowel = temp[j];
                while(mp[temp[j]] == 0) {
                    j++;
                }

                s[i] = temp[j];
                mp[temp[j]]--;
            }
        }

        return s;
    }
};
