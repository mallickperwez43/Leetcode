// method 1 

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<vector<int>> dp(m, vector<int>(n, 0));
         
        int maxSq = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = matrix[i][j] - '0';
                }
                else if(matrix[i][j] == '1'){
                    dp[i][j] = 1 + min({dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]});
                }

                maxSq = max(maxSq, dp[i][j]);
            }
        }

        return maxSq * maxSq;
    }
};


// method 2 

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
         
        int maxSq = 0;
        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(matrix[i][j] == '0'){
                    continue;
                }
                else if(matrix[i][j] == '1'){
                    dp[i][j] = 1 + min({dp[i][j + 1], dp[i + 1][j + 1], dp[i + 1][j]});
                }

                maxSq = max(maxSq, dp[i][j]);
            }
        }

        return maxSq * maxSq;
    }
};
