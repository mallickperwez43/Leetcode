class Solution {
public:
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n = moveTime.size();    
        int m = moveTime[0].size();

        vector<vector<int>> result(n, vector<int>(m, INT_MAX));
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;    
        result[0][0] = 0; // src
        pq.push({0, 0, 0});

        while(!pq.empty()) {
            int curTime = pq.top()[0];
            int i       = pq.top()[1];
            int j       = pq.top()[2];
            pq.pop();

            // check if reached destination
            if(i == n - 1 && j == m - 1) {
                return curTime;
            }

            for(auto& dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < n && j_ >= 0 && j_ < m) {
                    int waitTime    = max(moveTime[i_][j_] - curTime, 0);
                    int arrivalTime = curTime + waitTime + 1;

                    if(result[i_][j_] > arrivalTime) {
                        result[i_][j_] = arrivalTime;
                        pq.push({arrivalTime, i_, j_});
                    }
                }
            }
        }

        return -1;
    }
};

// TC : O(n * m * log(m * n))
// SC : O(n * m)
