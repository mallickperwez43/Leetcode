// BRUTE FORCE

class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n = nums.size();
        long long result = 0;

        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                for(int k = j + 1; k < n; k++) {
                    long long cur = 1LL* ((nums[i] - nums[j]) * nums[k]);
                    result = max(result, cur); 
                }
            }
        }

        return result;
    }
};

// TC : O(n ^ 3)
// SC : O(1)


// BETTER

class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n = nums.size();
        
        vector<int> leftMaxI(n);
        vector<int> rightMaxK(n);
        
        leftMaxI[0] = 0;
        for(int j = 1; j < n; j++) {
            leftMaxI[j] = max(leftMaxI[j - 1], nums[j - 1]);
        }

        rightMaxK[n - 1] = 0;
        for(int j = n - 2; j >= 0; j--) {
            rightMaxK[j] = max(rightMaxK[j + 1], nums[j + 1]);
        }

        long long result = 0;
        
        for(int j = 1; j < n - 1; j++) {
            result = max(result, (long long)(leftMaxI[j] - nums[j]) * rightMaxK[j]);
        }

        return result;
    }
};

// TC : O(n)
// SC : O(n)


// OPTIMAL

class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n = nums.size();
        
        long long maxDiff = 0;

        long long maxI = 0;

        long long result = 0;
        
        for(int k = 0; k < n; k++) {
            result = max(result, maxDiff * nums[k]);

            maxDiff = max(maxDiff, maxI - nums[k]);

            maxI = max(maxI, (long long)nums[k]);
        }

        return result;
    }
};

// TC : O(n)
// SC : O(1)
