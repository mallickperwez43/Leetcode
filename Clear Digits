// BRUTE FORCE
class Solution {
public:
    string clearDigits(string s) {
        int i = 0;

        while(i < s.length()) {
            if(isdigit(s[i])) {
                s.erase(i, 1);
                if(i - 1 >= 0) {
                    s.erase(i - 1, 1);
                    i--; // adjusting the index
                }
            }
            else {
                i++;
            }
        }

        return s;
    }
};

// TC : O(n * n)
// SC : O(1)


// STACK 
class Solution {
public:
    string clearDigits(string s) {
        stack<char> st;

        for(char& ch : s) {
            if(isdigit(ch)) {
                if(!st.empty()) {
                    st.pop();
                }
            }
            else {
                st.push(ch);
            }
        }

        string result = "";

        while(!st.empty()) {
            char ch = st.top();
            st.pop();

            result = ch + result;
        }

        return result;
    }
};

// TC : O(n)
// SC : O(n)


// STRING AS STACK 
class Solution {
public:
    string clearDigits(string s) {
        string result = ""; // we use this string as a stack

        for(char& ch : s) {
            if(isdigit(ch)) {
                if(!result.empty()) {
                    result.pop_back();
                }
            }
            else {
                result.push_back(ch);
            }
        }

        return result;
    }
};

// TC : O(n)
// SC : O(n) 


// IN PLACE WITHOUT EXTRA SPACE 
class Solution {
public:
    string clearDigits(string s) {
        int n = s.length();

        int i = 0; // traversing and finding a valid char to replace with
        int j = 0; // replace s[i] with s[j] replacing

        while(i < n) {
            if(isdigit[s[i]]) { // store idx
                j = max(j - 1, 0); // to prevent j from going negative
                // j--; // in future if ith index finds a valid charcater, we will put that at index j
            }
            else { // replace and move ahead
                s[j] = s[i];
                j++;
            }

            i++;
        }

        return s.substr(0, j);
    }
};

// TC : O(n)
// SC : O(1)
