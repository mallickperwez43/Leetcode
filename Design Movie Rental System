class MovieRentingSystem {
public:
    typedef pair<int, int> P;

    unordered_map<int, set<P>> available; // movie -> set<{price, shop}>
    unordered_map<int, set<P>> movieToShopPrice; // movie -> set<{shop, price}>
    set<tuple<int, int, int>> rented; // set<{price, shop, movie}>

    MovieRentingSystem(int n, vector<vector<int>>& entries) { // O(logn)
        for(auto& entry : entries) {
            int shop  = entry[0];
            int movie = entry[1];
            int price = entry[2];

            available[movie].insert({price, shop}); // log(n)
            movieToShopPrice[movie].insert({shop, price}); // log(n)
        }    
    }
    
    vector<int> search(int movie) { // O(1)
        vector<int> result;
        int count = 0;

        if(available.count(movie)) { // O(1)
            for(auto& [price, shop] : available[movie]) { // O(5)
                result.push_back(shop);
                count++;
                if(count >= 5) 
                    break;
            }
        }

        return result;
    }
    
    void rent(int shop, int movie) { // O(logn)
        auto it = movieToShopPrice[movie].lower_bound({shop, INT_MIN}); // logn
        int price = it -> second;

        available[movie].erase({price, shop}); // logn
        rented.insert({price, shop, movie}); // logn
    }
    
    void drop(int shop, int movie) { // O(logn)
        auto it = movieToShopPrice[movie].lower_bound({shop, INT_MIN}); // logn
        int price = it -> second;

        available[movie].insert({price, shop}); // logn
        rented.erase({price, shop, movie}); // logn
    }
    
    vector<vector<int>> report() { // O(1)
        vector<vector<int>> result;
        int count = 0;

        for(auto& [price, shop, movie] : rented) { // O(5)
            result.push_back({shop, movie});
            count++;

            if(count >= 5) 
                break;
        }

        return result;
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */
