// Difference array + linear search -> TLE

class Solution {
public:
    int n;
    int Q;

    bool checkWithDifferenceArrayTeq(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> diff(n, 0);

        for(int i = 0; i <= k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int x = queries[i][2];

            diff[l] += x;
            if(r + 1 < n) {
                diff[r + 1] -= x;
            }
        }

        int cumSum = 0;
        for(int i = 0; i < n; i++) {
            cumSum += diff[i];

            diff[i] = cumSum;

            if(nums[i] > diff[i]) { // nums[i] 0 nhi ban paya
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n = nums.size();
        Q = queries.size();
        
        auto lambda = [](int x) {
            return x == 0;
        };

        if(all_of(nums.begin(), nums.end(), lambda)) {
            return 0; // no query required because all are already zero
        }

        for(int i = 0; i < Q; i++) { // O(Q * (Q + n))
            if(checkWithDifferenceArrayTeq(nums, queries, i) == true) {
                return i + 1;
            }
        }

        return -1;
    }
};

// TC : O(Q * (Q + n))
// SC : O(n)


// Difference array + Binary search

class Solution {
public:
    int n;
    int Q;

    bool checkWithDifferenceArrayTeq(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> diff(n, 0);

        for(int i = 0; i <= k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int x = queries[i][2];

            diff[l] += x;
            if(r + 1 < n) {
                diff[r + 1] -= x;
            }
        }

        int cumSum = 0;
        for(int i = 0; i < n; i++) {
            cumSum += diff[i];

            diff[i] = cumSum;

            if(nums[i] > diff[i]) { // nums[i] 0 nhi ban paya
                return false;
            }
        }

        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n = nums.size();
        Q = queries.size();
        
        auto lambda = [](int x) {
            return x == 0;
        };

        if(all_of(nums.begin(), nums.end(), lambda)) {
            return 0; // no query required because all are already zero
        }

        int l = 0;
        int r = Q - 1;
        int k = -1;

        while(l <= r) { // O(logQ)
            int mid = l + (r - l) / 2;

            if(checkWithDifferenceArrayTeq(nums, queries, mid) == true) {  // O(Q + n)
                k = mid + 1; // possible answer
                r = mid - 1;
            }
            else {
                l = mid + 1;
            }
        } 

        return k;
    }
};

// TC : O(logQ * (Q + n))
// SC : O(n)
