class LRUCache {
public:
    list<int> dll; // store key
    unordered_map<int, pair<list<int> :: iterator, int>> mp; // key -> {address, value}
    int n; // size

    LRUCache(int capacity) {
        n = capacity;    
    }
    
    void makeRecentlyUsed(int key) {
        dll.erase(mp[key].first);

        dll.push_front(key);

        mp[key].first = dll.begin();
    }

    int get(int key) {

        // find key in map
        if(mp.find(key) == mp.end()) {
            return -1;
        }

        makeRecentlyUsed(key);

        return mp[key].second;
    }
    
    void put(int key, int value) {
        
        if(mp.find(key) != mp.end()) {
            mp[key].second = value; // update the value
            makeRecentlyUsed(key);
        }
        else {
            if(n == 0) { // capacity full so delete the back node
                int key_to_be_deleted = dll.back();
                mp.erase(key_to_be_deleted);
                dll.pop_back();

                n++;
            }

            dll.push_front(key);
            mp[key] = {dll.begin(), value};
            n--;
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
