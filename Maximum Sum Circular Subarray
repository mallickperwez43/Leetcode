// Kadane's variation
class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
        int n      = nums.size();
        int SUM    = nums[0];
        int curMin = nums[0];
        int curMax = nums[0];
        int minSum = nums[0];
        int maxSum = nums[0];

        for(int i = 1; i < n; i++){
            SUM += nums[i];

            curMin = min(curMin + nums[i], nums[i]);
            curMax = max(curMax + nums[i], nums[i]);

            minSum = min(minSum, curMin);
            maxSum = max(maxSum, curMax);
        }

        int circularSum = SUM - minSum;

        if(maxSum > 0){
            return max(maxSum, circularSum);
        }

        return maxSum;
    }
};

// TC : O(n) 
// SC : O(1) 
