class Solution {
private:
    int firstOccurance(vector<int>& arr , int size , int key) {

        int start = 0;
        int end = size - 1;
        int ans = -1; // default
    
        int mid = start + (end - start) / 2;
    
        while(start <= end){
        
            // first condition of key match
            if(arr[mid] == key){
                ans = mid;
                end = mid - 1; // first occurance left side milega na
            }
            else if(arr[mid] > key){ // left side jayega
                end = mid - 1;
            }
            else if(arr[mid] < key){ // right side jayega
                start = mid + 1;
            }
        
            mid = start + (end - start) / 2;
        }
        return ans;
    }

    int lastOccurance(vector<int>& arr , int size , int key){

        int start = 0;
        int end = size - 1;
        int ans = -1; // default
    
        int mid = start + (end - start) / 2;
    
        while(start <= end){
        
            // first condition of key match
            if(arr[mid] == key){
                ans = mid;
                start = mid + 1; // last occurance right side milega na
            }
            else if(arr[mid] > key){ // left side jayega
                end = mid - 1;
            }
            else if(arr[mid] < key){ // right side jayega
                start = mid + 1;
            }
        
            mid = start + (end - start) / 2;
        }
        return ans;
    }

public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> v;
        int first = firstOccurance(nums , nums.size() , target);
        int last = lastOccurance(nums , nums.size() , target);
        v.push_back(first);
        v.push_back(last);

        return v;
    }
};
