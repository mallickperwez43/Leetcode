// Method 1 -> O(n) space

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
         
        if(head == NULL || head -> next == NULL)
            return head;

        // using min heap
        priority_queue<int, vector<int>, greater<int>> pq;
        ListNode* cur = head;
        while(cur != NULL) {
            pq.push(cur -> val);
            cur = cur -> next;
        }

        cur = head;
        while(cur != NULL && !pq.empty()) {
            cur -> val = pq.top();
            pq.pop();
            cur = cur -> next;
        }

        return head;
    }
};

// method 2 -> space optimized (merge sort)

class Solution {
public:

    ListNode* mergeList(ListNode* l1 , ListNode* l2) {
        ListNode* dummy = new ListNode();
        ListNode* tail = dummy;

        while(l1 != NULL && l2 != NULL) {
            if(l1 -> val <= l2 -> val) {
                tail -> next = l1;
                l1 = l1 -> next;
            }
            else {
                tail -> next = l2;
                l2 = l2 -> next;
            }
            tail = tail -> next;
        }

        if(l1 != NULL) {
            tail -> next = l1;
        }
        else {
            tail -> next = l2;
        }

        return dummy -> next;
    }

    ListNode* getMid(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head -> next;

        while(fast != NULL && fast -> next != NULL) {
            slow = slow -> next;
            fast= fast -> next -> next;
        }

        return slow;
    }
    
    ListNode* sortList(ListNode* head) {
         
        if(head == NULL || head -> next == NULL)
            return head;

        // get mid & split list into two halfs
        ListNode* mid = getMid(head);
        ListNode* left = head; // head -- mid
        ListNode* right = mid -> next; // mid + 1 --- end
        mid -> next = NULL;

        // sort list using merge sort
        left = sortList(left);
        right = sortList(right);
        
        // merge list
        return mergeList(left, right);
    }
};
