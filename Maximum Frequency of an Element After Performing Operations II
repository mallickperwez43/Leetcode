// Modified Difference Array Technique to a Map of peak points

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int maxVal = *max_element(nums.begin(), nums.end()) + k;

        map<int, int> diff; // storing in map as difference array
        unordered_map<int, int> freq; // stores frequency of the present elements in nums 
        
        for(int i = 0; i < nums.size(); i++) { // O(nlogn)
            freq[nums[i]]++;

            int l = max(nums[i] - k, 0);
            int r = min(nums[i] + k, maxVal);

            diff[l]++;
            diff[r + 1]--;

            diff[nums[i]] += 0; // inserting nums elements in map too
        }

        int result = 1;
        int cumSum = 0;
        for(auto it = diff.begin(); it != diff.end(); it++) { // O(n)
            int target = it -> first;
            it -> second += cumSum;
            
            int targetFreq = freq[target];
            
            int needConversion = it -> second - targetFreq;

            int maxPossibleFreq = targetFreq + min(numOperations, needConversion);

            result = max(result, maxPossibleFreq);

            cumSum = it -> second;
        }

        return result;
    }
};

// TC : O(nlogn + n)
// SC : O(n)
