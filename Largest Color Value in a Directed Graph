class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> adj;
        
        int N = colors.size();
        
        vector<int> indegree(N, 0);

        for(auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];

            adj[u].push_back(v);
            indegree[v]++;
        }

        queue<int> q;
        vector<vector<int>> dp(N, vector<int>(26, 0));
        // dp[i][j] max freq of similar color valid path till node i with color j

        for(int i = 0; i < N; i++) {
            if(indegree[i] == 0) {
                q.push(i);
                dp[i][colors[i] - 'a'] = 1; // dp[node][color]
            }
        }

        int answer = 0;

        int countNodes = 0;

        while(!q.empty()) {
            
            int u = q.front();
            q.pop();

            countNodes++;

            answer = max(answer, dp[u][colors[u] - 'a']);

            for(int& v : adj[u]) {
                
                for(int i = 0; i < 26; i++) {
                    
                    dp[v][i] = max(dp[v][i], dp[u][i] + (colors[v] - 'a' == i));
                }

                indegree[v]--;
                if(indegree[v] == 0) {
                    q.push(v);
                }
            }
        }

        if(countNodes < N) {
            return -1; // cycle
        }

        return answer;
    }
};
