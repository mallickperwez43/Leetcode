class Solution {
public:
    int maxFreeTime(int eventTime, vector<int>& startTime, vector<int>& endTime) {
        vector<int> freeArray; // store durations of free gaps

        // ith event
        // ith start - i-1th ka end = free gap duration
        freeArray.push_back(startTime[0]); // first gap from [0.. start time of first event]
        for(int i = 1; i < startTime.size(); i++) {
            freeArray.push_back(startTime[i] - endTime[i - 1]);
        }
        freeArray.push_back(eventTime - endTime.back()); // last gap [eventTime - last event end time]

        int n = freeArray.size();
        vector<int> maxLeftFree(n, 0);
        for(int i = 1; i < n; i++)
            maxLeftFree[i] = max(maxLeftFree[i - 1], freeArray[i - 1]);
        
        vector<int> maxRightFree(n, 0);
        for(int i = n - 2; i >=0; i--)
            maxRightFree[i] = max(maxRightFree[i + 1], freeArray[i + 1]);

        int result = *max_element(freeArray.begin(), freeArray.end()); // case where no event is moved case 0
        
        // iterating on freeArray
        for(int i = 1; i < n; i++) {
            int curEventTime = endTime[i - 1] - startTime[i - 1]; // duration of the event = d
            
            // case 1.1 - completely moved
            if(curEventTime <= max(maxLeftFree[i - 1], maxRightFree[i])) {
                result = max(result, freeArray[i - 1] + curEventTime + freeArray[i]);
            }

            // case 1.2 - shift adjacent
            result = max(result, freeArray[i - 1] + freeArray[i]);
        }

        return result;
    }
};
