/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL){
            return NULL;
        }

        if(key < root -> val){
            root -> left = deleteNode(root -> left, key);
        }
        else if(key > root -> val){
            root -> right = deleteNode(root -> right, key);
        }
        else{
            // Node with only one child or no child
            if(root -> left == NULL){
                TreeNode* temp = root -> right;
                delete root;
                return temp;
            }
            if(root -> right == NULL){
                TreeNode* temp = root -> left;
                delete root;
                return temp;
            }

            // Node with two children: Get the inorder predecessor (max in the left subtree)
            TreeNode* temp = root -> left;
            while(temp -> right != NULL){
                temp = temp -> right;
            }

            root -> val = temp -> val; // Copy the inorder predecessor's content to this node

            root -> left = deleteNode(root -> left, temp -> val); // Delete the inorder predecessor
        }

        return root;
    }
};
