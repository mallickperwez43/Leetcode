// DFS 

class Solution {
public:
    
    int dfs(int box, vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, unordered_set<int>& visited, unordered_set<int>& foundBoxes) {
        
        if(visited.count(box)) {
            return 0;
        }

        if(status[box] == 0) {
            foundBoxes.insert(box);
            return 0;
        }

        visited.insert(box);

        int candiesCollected = candies[box];

        for(int& insideBox : containedBoxes[box]) {
            candiesCollected += dfs(insideBox, status, candies, keys, containedBoxes, visited, foundBoxes);
        }

        for(int& boxKey : keys[box]) {
            status[boxKey] = 1; // can be opened
            if(foundBoxes.count(boxKey)) {
                candiesCollected += dfs(boxKey, status, candies, keys, containedBoxes, visited, foundBoxes);
            }
        }

        return candiesCollected;
    }

    int maxCandies(vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {
        
        int candiesCollected = 0;
        unordered_set<int> visited;
        unordered_set<int> foundBoxes;

        for(int& box : initialBoxes) {
            candiesCollected += dfs(box, status, candies, keys, containedBoxes, visited, foundBoxes);
        }

        return candiesCollected;
    }
};

// TC : O(n) visiting all box only once, n = no of boxes
// SC : O(n)


// BFS 

class Solution {
public:
    int maxCandies(vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {
        
        int candiesCollected = 0;
        unordered_set<int> visited;
        unordered_set<int> foundBoxes;
        
        queue<int> q; // insert those which you have now and you open it
        for(int& box : initialBoxes) {
            foundBoxes.insert(box);
            if(status[box] == 1) {
                q.push(box);
                visited.insert(box);
                candiesCollected += candies[box];
            }
        }

        while(!q.empty()) {
            int box = q.front();
            q.pop();

            for(int& insideBox : containedBoxes[box]) {
                foundBoxes.insert(insideBox);
                if(status[insideBox] == 1 && !visited.count(insideBox)) {
                    q.push(insideBox);
                    visited.insert(insideBox);
                    candiesCollected += candies[insideBox];
                }
            }

            for(int& boxKey : keys[box]) {
                status[boxKey] = 1; // can be opened in future if we ever reached this box
                if(foundBoxes.count(boxKey) && !visited.count(boxKey)) {
                    q.push(boxKey);
                    visited.insert(boxKey);
                    candiesCollected += candies[boxKey];
                }
            }
        }

        return candiesCollected;
    }
};

// TC : O(n) visiting all box only once, n = no of boxes
// SC : O(n)
