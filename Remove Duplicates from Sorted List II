/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        // same as ListNode* dummy = new ListNode(0), dummy -> next = head
        ListNode* dummy = new ListNode(0, head);
        ListNode* prev = dummy;
    
        while(head != NULL) {
            if(head -> next != NULL && head -> val == head -> next -> val) { // duplicates
                while(head -> next != NULL && head -> val == head -> next -> val) {
                    head = head -> next; // skip the duplicate
                }
                prev -> next = head -> next; // connect head to the head next to check if duplicate for next iteration
            }
            else {
                prev = prev -> next; 
            }

            head = head -> next;           
        }  

        head = dummy -> next; // reassign head to its place
        delete(dummy);
        
        return head;
    }
};
