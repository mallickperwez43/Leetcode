/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head == NULL || left == right){
            return head;
        }

        ListNode* dummy = new ListNode(-1);
        dummy -> next = head;
        ListNode* prevNode = dummy;

        // move till left - 1
        for(int i = 0; i < left - 1; i++){
            prevNode = prevNode -> next;
        }

        // startNode
        ListNode* start = prevNode -> next;
        ListNode* curNode = start;
        ListNode* nextNode = NULL;
        ListNode* tempPrev = prevNode;
        
        for(int i = left; i <= right; i++){
            nextNode = curNode -> next;
            curNode -> next = tempPrev;
            tempPrev = curNode;
            curNode = nextNode;
        }
       
        // Connect the previous part to the newly reversed section
        prevNode -> next = tempPrev;

        // Connect the reversed segment to the remainder of the list
        start -> next = curNode;
        
        head = dummy -> next;
        delete dummy;

        return head;

    }
};
