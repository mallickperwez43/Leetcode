// RECURSION + MEMOIZATION

class Solution {
public:
    int M = 1e9 + 7;

    int solve(int i, int count, vector<int>& freq, int k, vector<vector<int>>& dp) {
        if(i >= freq.size()) {
            if(count < k)
                return 1; // found invalid string
            return 0;
        }
        
        if(dp[i][count] != -1)
            return dp[i][count];

        long long result = 0;

        for(int take = 1; take <= freq[i]; take++) {
            if(count + take < k) {
                result = (result + solve(i + 1, count + take, freq, k, dp)) % M;
            } else {
                break;
            }
        }

        return dp[i][count] = result;
    }

    int possibleStringCount(string word, int k) {
        if(k > word.length())
            return 0;
        
        vector<int> freq;
        int count = 1;
        for(int i = 1; i < word.length(); i++) {
            if(word[i] == word[i - 1]) {
                count++;
            }
            else {
                freq.push_back(count);
                count = 1;
            }
        }
        freq.push_back(count); // last char

        long long P = 1; // total possible strings
        for(int& f : freq) {
            P = (P * f) % M;
        }

        if(freq.size() >= k)
            return P;

        // we have to now find count of invalid strings

        int n = freq.size();
        int cnt = k; // invalid karne ke liye count less than k
        vector<vector<int>> dp(n + 1, vector<int>(cnt + 1, -1));

        long long invalidCount = solve(0, 0, freq, k, dp);

        return (P - invalidCount + M) % M;
    }
};


// BOTTOM UP

class Solution {
public:
    int M = 1e9 + 7;

    int possibleStringCount(string word, int k) {
        if(k > word.length())
            return 0;
        
        vector<int> freq;
        int count = 1;
        for(int i = 1; i < word.length(); i++) {
            if(word[i] == word[i - 1]) {
                count++;
            }
            else {
                freq.push_back(count);
                count = 1;
            }
        }
        freq.push_back(count); // last char

        long long P = 1; // total possible strings
        for(int& f : freq) {
            P = (P * f) % M;
        }

        if(freq.size() >= k)
            return P;

        // we have to now find count of invalid strings

        int n = freq.size();
        int cnt = k; // invalid karne ke liye count less than k
        vector<vector<int>> dp(n + 1, vector<int>(cnt + 1, 0));

        // base case
        for(int count = k- 1; count >= 0; count--) {
            dp[n][count] = 1;
        }
        
        for(int i = n - 1; i >= 0; i--) {
            for(int count = k - 1; count >= 0; count--) {

                long long result = 0;

                for(int take = 1; take <= freq[i]; take++) {
                    if(count + take < k) {
                        result = (result + dp[i + 1][count + take]) % M;
                    } 
                    else break;
                }
                
                dp[i][count] = result;
            }
        }

        long long invalidCount = dp[0][0];

        return (P - invalidCount + M) % M;
    }
};


// OPTIMISED BOTTOM UP

class Solution {
public:
    int M = 1e9 + 7;

    int possibleStringCount(string word, int k) {
        if(k > word.length())
            return 0;
        
        vector<int> freq;
        int count = 1;
        for(int i = 1; i < word.length(); i++) {
            if(word[i] == word[i - 1]) {
                count++;
            }
            else {
                freq.push_back(count);
                count = 1;
            }
        }
        freq.push_back(count); // last char

        long long P = 1; // total possible strings
        for(int& f : freq) {
            P = (P * f) % M;
        }

        if(freq.size() >= k)
            return P;

        // we have to now find count of invalid strings

        int n = freq.size();
        int cnt = k; // invalid karne ke liye count less than k
        vector<vector<int>> dp(n + 1, vector<int>(cnt + 1, 0));

        // base case
        for(int count = k- 1; count >= 0; count--) {
            dp[n][count] = 1;
        }
        
        for(int i = n - 1; i >= 0; i--) {
            
            vector<int> prefix(k + 1, 0);
            for(int h = 1; h <= k; h++) {
                prefix[h] = (prefix[h - 1] + dp[i + 1][h - 1]) % M;
            }

            for(int count = k - 1; count >= 0; count--) {
                
                int l = count + 1;
                int r = count + freq[i];
                
                if(r + 1 > k) 
                    r = k - 1;

                if(l <= r) {
                    dp[i][count] = (prefix[r + 1] - prefix[l] + M) % M;
                } 
            }
        }

        long long invalidCount = dp[0][0];

        return (P - invalidCount + M) % M;
    }
};
