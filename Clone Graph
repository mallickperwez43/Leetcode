/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/




// DFS

class Solution {
public:
    unordered_map<Node*, Node*> mp;

    void DFS(Node* node, Node* clone_node) {

        for(Node* n : node -> neighbors) {

            if(mp.find(n) == mp.end()) {

                Node* clone = new Node(n -> val);
                mp[n] = clone;
                clone_node -> neighbors.push_back(clone);

                DFS(n, clone);
            }
            else {

                clone_node -> neighbors.push_back(mp[n]);

            }
        }
    }

    Node* cloneGraph(Node* node) {
        if(!node)
            return NULL;
        
        mp.clear();

        // clone the given node
        Node* clone_node = new Node(node -> val);

        // Now, clone its neighbours and recursively their neighbours
        /*
            But if a node reappears, then we need to access the cloned node
            So, store in a map
            map<Node*, Node*> 
            original_node -> clone_node
        */

        mp[node] = clone_node;

        DFS(node, clone_node); 

        return clone_node;
    }
};



// BFS

class Solution {
public:
    unordered_map<Node*, Node*> mp;

    void BFS(queue<Node*>& q) {

        while(!q.empty()) {

            Node* node = q.front();
            Node* clone_node = mp[node];
            q.pop();

            for(Node* n : node -> neighbors) {
                 
                if(mp.find(n) == mp.end()) {

                    Node* clone = new Node(n -> val);
                    mp[n] = clone;
                    clone_node -> neighbors.push_back(clone);

                    q.push(n);

                }
                else {

                    clone_node -> neighbors.push_back(mp[n]);

                }
            }
        }
    }

    Node* cloneGraph(Node* node) {
        if(!node)
            return NULL;
        
        mp.clear();

        // clone the given node
        Node* clone_node = new Node(node -> val);

        // Now, clone its neighbours and recursively their neighbours
        /*
            But if a node reappears, then we need to access the cloned node
            So, store in a map
            map<Node*, Node*> 
            original_node -> clone_node
        */

        mp[node] = clone_node;

        queue<Node*> q;
        q.push(node);

        BFS(q);

        return clone_node;
    }
};
