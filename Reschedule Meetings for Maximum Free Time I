class Solution {
public:
    int maxFreeTime(int eventTime, int k, vector<int>& startTime, vector<int>& endTime) {
        int n = startTime.size();
        
        vector<int> freeArray; // store durations of free Gaps
        
        // ith event
        // ith start - i - 1th ka end = free gap duration
        freeArray.push_back(startTime[0]);
        for(int i = 1; i < n; i++) {
            freeArray.push_back(startTime[i] - endTime[i - 1]);
        }
        freeArray.push_back(eventTime - endTime.back());

        // sliding window of k + 1 size maximum sum

        int i = 0;
        int j = 0;
        int maxSum = 0;
        int curSum = 0;
        int m = freeArray.size();

        while(j < m) {
            curSum += freeArray[j];

            if(i < m && j - i + 1 > k + 1) {
                curSum -= freeArray[i];
                i++;
            }

            maxSum = max(maxSum, curSum);

            j++;
        }

        return maxSum;
    }
};
