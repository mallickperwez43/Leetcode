// RECURSION + MEMOIZATION -> (TLE + MLE)

class Solution {
public:

    int LIS(vector<int>& nums, int i, int prev, int mod, vector<vector<vector<int>>>& dp) {
        // base case
        if(i >= nums.size())
            return 0;
           
        if(dp[i][prev + 1][mod] != -1)
            return dp[i][prev + 1][mod];

        int take = 0;
        int skip = 0;

        // take
        if(prev == -1 || (nums[prev] + nums[i]) % 2 == mod) {
            take = 1 + LIS(nums, i + 1, i, mod, dp);
        }

        // skip
        skip = LIS(nums, i + 1, prev, mod, dp);

        return dp[i][prev + 1][mod] = max(take, skip);
    }

    int maximumLength(vector<int>& nums) {
        int n = nums.size();

        int maxSubLength = 0;

        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(n + 1, vector<int>(2, -1)));

        maxSubLength = max(maxSubLength, LIS(nums, 0, -1, 0, dp)); // % 2 == 0 ke liye
        maxSubLength = max(maxSubLength, LIS(nums, 0, -1, 1, dp)); // % 2 == 1 ke liye

        return maxSubLength;
    }
};


C++
Analyze Complexity
// BOTTOM UP - TLE 

class Solution {
public:
    int maximumLength(vector<int>& nums) {
        int n = nums.size();

        // mod = 1
        vector<int> dp1(n, 1);

        int maxSubLen = 1;

        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                int mod = (nums[j] + nums[i]) % 2;

                if(mod == 1) {
                    dp1[i] = max(dp1[i], 1 + dp1[j]);
                    maxSubLen = max(maxSubLen, dp1[i]);
                }
            }
        }

        // mod = 0
        vector<int> dp0(n, 1);

        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                int mod = (nums[j] + nums[i]) % 2;

                if(mod == 0) {
                    dp0[i] = max(dp0[i], 1 + dp0[j]);
                    maxSubLen = max(maxSubLen, dp0[i]);
                }
            }
        }

        return maxSubLen;
    }
};


// IMPROVING BOTTOM UP - TLE

class Solution {
public:
    int maximumLength(vector<int>& nums) {
        int n = nums.size();

        // vector<int> dp1(n, 1); // mod = 1
        // vector<int> dp0(n, 1); // mod = 0
         
        // 2D vector -> row 0 -> mod == 0, row 1 -> mod == 1
        vector<vector<int>> dp(2, vector<int>(n, 1)); 

        int maxSubLen = 1;

        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                int mod = (nums[j] + nums[i]) % 2;

                dp[mod][i] = max(dp[mod][i], 1 + dp[mod][j]); 
                maxSubLen = max(maxSubLen, dp[mod][i]);
            }
        }

        return maxSubLen;
    }
};


class Solution {
public:
    int maximumLength(vector<int>& nums) {
        int n = nums.size();
        
        int countEven = 0; // length of even numbers subsequence
        int countOdd  = 0; // length of odd numbers subsequence

        for(int& num : nums) {
            if(num & 1) 
                countOdd++;
            else
                countEven++;
        }

        int parity = nums[0] % 2;
        int alternating = 1; // length of alternating parity numbers subsequence

        for(int i = 1; i < n; i++) {
            int currParity = nums[i] % 2;
            if(currParity != parity) {
                alternating++;
                parity = currParity;
            }
        }

        return max({countEven, countOdd, alternating});
    }
};
