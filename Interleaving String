// 3D DP -> Recursion + Memoization

class Solution {
public:
    int m, n , N;
   
    bool solve(int i, int j, int k, string& s1, string& s2, string& s3, vector<vector<vector<int>>>& dp) {
        if(i == m && j == n && k == N) {
            return true;
        }

        if(k >= N) { // one of the strings isnt consumed yet
            return false;
        }

        if(dp[i][j][k] != -1) {
            return dp[i][j][k];
        }

        bool result = false;

        if(i < m && s1[i] == s3[k]) {
            result = solve(i + 1, j, k + 1, s1, s2, s3, dp);
        }

        if(result == true) {
            return dp[i][j][k] = result;
        }

        if(j < n && s2[j] == s3[k]) {
            result = solve(i, j + 1, k + 1, s1, s2, s3, dp);
        }

        return dp[i][j][k] = result;
    }

    bool isInterleave(string s1, string s2, string s3) {
        m = s1.length();
        n = s2.length();
        N = s3.length();
        
        vector<vector<vector<int>>> dp(m + 1, vector<vector<int>>(n + 1, vector<int>(N + 1, -1)));

        return solve(0, 0 , 0, s1, s2, s3, dp);
    }
};



// 2D DP -> Recursion + Memoization

class Solution {
public:
    int m, n , N;
   
    bool solve(int i, int j, string& s1, string& s2, string& s3, vector<vector<int>>& dp) {
        if(i == m && j == n && i + j == N) {
            return true;
        }

        if(i + j >= N) { // one of the strings isnt consumed yet
            return false;
        }

        if(dp[i][j] != -1) {
            return dp[i][j];
        }

        bool result = false;

        if(i < m && s1[i] == s3[i + j]) {
            result = solve(i + 1, j, s1, s2, s3, dp);
        }

        if(result == true) {
            return dp[i][j] = result;
        }

        if(j < n && s2[j] == s3[i + j]) {
            result = solve(i, j + 1, s1, s2, s3, dp);
        }

        return dp[i][j] = result;
    }

    bool isInterleave(string s1, string s2, string s3) {
        m = s1.length();
        n = s2.length();
        N = s3.length();
        
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));

        return solve(0, 0, s1, s2, s3, dp);
    }
};


// Bottom Up

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.length();
        int n = s2.length();
        int N = s3.length();
        
        if(m + n != N) {
            return false;
        }

        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        // dp[i][j] = can form s3[0 .. i + j - 1] from s1[0 .. i - 1] and s2[0 .. j - 1];
        
        dp[0][0] = true; // s1 = "", s2 = "", s3 = "" always can form an empty strings from empty

        // fill the first row by checking s2 and s3 chars
        for(int j = 1; j <= n; j++) {
            dp[0][j] = (dp[0][j - 1] && s2[j - 1] == s3[j - 1]);
        }

        // fill the first col by checking s1 and s3 chars
        for(int i = 1; i <= m; i++) {
            dp[i][0] = (dp[i - 1][0] && s1[i - 1] == s3[i - 1]);
        }

        // fill rest
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||
                           (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
            }
        }
        
        return dp[m][n];
    }
};
