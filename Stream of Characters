struct trieNode{
    bool endOfWord;
    trieNode* children[26];

    trieNode(){
        endOfWord = false;
        for(int i = 0; i < 26; i++){
            children[i] = NULL;
        }
    }
};

class StreamChecker {
public:
    
    trieNode* root = new trieNode(); // root
    string streamStr = "";
    
    void insert(trieNode* root, string& word){
        trieNode* crawler = root;

        for(int i = word.length() - 1; i >= 0; i--){
            int idx = word[i] - 'a';

            if(crawler -> children[idx] == NULL){
                crawler -> children[idx] = new trieNode();
            }
            crawler  = crawler -> children[idx]; 
        } 

        crawler -> endOfWord = true;
    }

    bool search(trieNode* root, string& s){
        trieNode* crawler = root;

        for(int i = s.length() - 1; i >= 0; i--){
            int idx = s[i] - 'a';
            if(crawler -> children[idx] == NULL) { // no path in trie
                return false;
            }
            crawler = crawler -> children[idx];
            if(crawler -> endOfWord){ // valid suffix 
                return true; 
            }
        }

        return false;
    }

    StreamChecker(vector<string>& words) {
        
        //insert all the words in trie in reverse fashion
        for(string& word : words){
            insert(root, word);
        }
    }
    
    bool query(char letter) {
        streamStr += letter;

        bool result = search(root, streamStr);

        return result;
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */
