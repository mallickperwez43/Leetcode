class WordDictionary {
public:
    struct trieNode {
        bool endOfWord;
        trieNode* children[26];
    };
    
    trieNode* getNode() {
        trieNode* newNode = new trieNode();

        newNode -> endOfWord = false;

        for(int i = 0; i < 26; i++){
            newNode -> children[i] = NULL;
        }

        return newNode;
    }
    
    trieNode* root;

    WordDictionary() {
        root = getNode();
    }
    
    void addWord(string word) {
        trieNode* crawler = root;

        for(char ch : word){
            int index = ch - 'a';

            if(crawler -> children[index] == NULL){
                crawler -> children[index] = getNode();
            }
            crawler = crawler -> children[index];
        }

        crawler -> endOfWord = true;
    }
    
    bool search(string word) {
        return searchInTrie(root, word, 0);
    }

    bool searchInTrie(trieNode* root, string& word, int index) {
        if(index == word.length()){
            return root -> endOfWord;
        }

        char ch = word[index];

        if(ch == '.'){
            // check for all children
            for(int i = 0; i < 26; i++){
                if(root -> children[i] != NULL){
                    if(searchInTrie(root -> children[i], word, index + 1)){
                        return true;
                    }
                }
            }
            return false; // no match found
        }
        else{
            int idx = ch - 'a'; 
            if(root -> children[idx] == NULL){ // no word in this prefix exist
                return false;
            }
            return searchInTrie(root -> children[idx], word, index + 1);
        }
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
