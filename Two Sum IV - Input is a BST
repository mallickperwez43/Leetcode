/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class BSTIterator{
private:
    stack<TreeNode*> st;
    bool reverse;

    void pushNodes(TreeNode* root){
        while(root != NULL){
            st.push(root);
            if(reverse){
                root = root -> right;
            }
            else{
                root = root -> left;
            }
        }
    }

public:
    BSTIterator(TreeNode* root, bool isReverse){
        reverse = isReverse;
        pushNodes(root);
    }

    bool hasNext(){
        return !st.empty();
    }

    int next(){
        TreeNode* top = st.top();
        st.pop();

        if(reverse){
            pushNodes(top -> left);
        }
        else{
            pushNodes(top -> right);
        }

        return top -> val;
    }
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        BSTIterator l(root, false); // next
        BSTIterator r(root, true); // before

        int i = l.next();
        int j = r.next();

        while(i < j){
            if(i + j == k){
                return true;
            }
            else if(i + j < k){
                i = l.next();
            }
            else{
                j = r.next();
            }
        }      

        return false;
    }
};

// TC : O(N)
// SC : O(H)
