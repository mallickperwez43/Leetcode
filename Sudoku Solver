class Solution {
public:
    bool isSafe(int row, int col, char ch, vector<vector<char>>& board){
        for(int i = 0; i < 9; i++){
            // rows
            if(board[row][i] == ch){
                return false;
            }
            // cols
            if(board[i][col] == ch){
                return false;
            }
            // innerboard
            int innerRow = 3 * (row / 3) + (i / 3);
            int innerCol = 3 * (col / 3) + (i % 3);
            if(board[innerRow][innerCol] == ch){
                return false;
            }
        }

        return true;
    }

    bool solve(vector<vector<char>>& board){
        for(int r = 0; r < 9; r++){
            for(int c = 0; c < 9; c++){
                if(board[r][c] == '.'){

                    for(char val = '1'; val <= '9'; val++){
                        //can the curr val be placed here
                        if(isSafe(r, c, val, board)){
                            board[r][c] = val; // do
                            
                            if(solve(board)){ // explore
                                return true;
                            } 
                            
                            board[r][c] = '.';  // undo
                        }                       
                    }
                    return false;
                }
            }
        }

        return true;
    }

    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
        return;
    }
};
