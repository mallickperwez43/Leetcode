// top - down 
class Solution {
public:
    int m, n;
     
    int solve(int i, int j, vector<vector<int>>& matrix,  vector<vector<int>>& dp){
        if(i >= m || j >= n) {
            return 0;
        }

        if(matrix[i][j] == 0)
            return 0;
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int right = solve(i, j + 1, matrix, dp);
        int dia   = solve(i + 1, j + 1, matrix, dp);
        int below = solve(i + 1, j, matrix, dp);

        return dp[i][j] = 1 + min({right, dia, below});
    }

    int countSquares(vector<vector<int>>& matrix) {
        m = matrix.size();
        n = matrix[0].size();

        int result = 0; // total number of square submatrixes having only 1s
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == 1){
                    result += solve(i, j, matrix, dp);
                }
            }
        }    

        return result;
    }
};

// TC : O(m * n)
// SC : O(m * n)


// bottom - up
class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();

        int result = 0; // total number of square submatrixes having only 1s
       
        vector<vector<int>> dp(m , vector<int>(n, 0));
        
        // dp[i][j] = total square submatrices (having 1s) ending at cell [i][j]

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = matrix[i][j];
                }
                else if(matrix[i][j] == 1) {
                        dp[i][j] = 1 + min({dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]});
                }

                result += dp[i][j];
            }
        }

        return result;
    }
};

// TC : O(m * n)
// SC : O(m * n)


// bottom - up
class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();

        int result = 0; // total number of square submatrixes having only 1s
       
        vector<vector<int>> dp(m + 1 , vector<int>(n + 1, 0));
        
        // dp[i][j] = total square submatrices (having 1s) ending at cell [i][j]

        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(matrix[i][j] == 0) continue;
                else if(matrix[i][j] == 1) {
                        dp[i][j] = 1 + min({dp[i][j + 1], dp[i + 1][j + 1], dp[i + 1][j]});
                }
                
                result += dp[i][j];
            }
        }

        return result;
    }
};

// TC : O(m * n)
// SC : O(m * n)
