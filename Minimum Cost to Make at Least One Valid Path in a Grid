// Method 1 : Naive approach -> backtracking

class Solution {
public:
    vector<vector<int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int m, n;
    int dfs(int i, int j, vector<vector<int>>& grid, vector<vector<bool>>& visited, int cost){
        if(i == m - 1 && j == n - 1) { // reached destination
            return cost;
        }

        visited[i][j] = true;

        // explore
        int minCost = INT_MAX;
        for(int dir_i = 0; dir_i < 4; dir_i++) {
            int i_ = i + dir[dir_i][0];
            int j_ = j + dir[dir_i][1];
            
            if(i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && !visited[i_][j_]) {
                int nextCost = cost + ((grid[i][j] - 1 != dir_i) ? 1 : 0);
                minCost = min(minCost, dfs(i_, j_, grid, visited, nextCost)); 
            }
        }

        visited[i][j] = false;

        return minCost;
    }
    int minCost(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();

        vector<vector<bool>> visited(m, vector<bool>(n, false));

        return dfs(0, 0, grid, visited, 0); // explore all paths by backtracking
    }
};


// Method 2 : Dijkstra -> shortest path

class Solution {
public:
    vector<vector<int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq; // min heap of vector<int>
        vector<vector<int>> result(m, vector<int>(n, INT_MAX));

        pq.push({0, 0, 0});
        result[0][0] = 0;

        while(!pq.empty()) {
            auto cur = pq.top();
            pq.pop(); 

            int curCost = cur[0];
            int i       = cur[1];
            int j       = cur[2];

            if(result[i][j] < curCost) {
                continue;
            }

            for(int dir_i = 0; dir_i < 4; dir_i++){
                int i_ = i + dir[dir_i][0];
                int j_ = j + dir[dir_i][1];

                if(i_ >= 0 && i_ < m && j_ >= 0 && j_ < n) {
                    int gridDir = grid[i][j];
                    int dirCost = ((gridDir - 1 != dir_i) ? 1 : 0);

                    int newCost = curCost + dirCost;

                    if(newCost < result[i_][j_]) {
                        result[i_][j_] = newCost;
                        pq.push({newCost, i_, j_});
                    }
                }
            }
        }

        return result[m - 1][n - 1]; // min cost to reach (m - 1, n - 1)
    }
};

// TC : O(m * n * log(m * n))
// SC : O(m * n)
