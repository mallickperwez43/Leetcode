class Router {
public:
    int MAX_SIZE;
    unordered_map<string, vector<int>> packetStore; // key -> {S, D, T}
    unordered_map<int, vector<int>> destTimeMap; // D -> {T1, T2, T3}
    queue<string> que;

    Router(int memoryLimit) {
        MAX_SIZE = memoryLimit;    
    }
    
    string makeKey(int S, int D, int T) { // O(log10(digits))
        return to_string(S) + "_" + to_string(D) + "_" + to_string(T);
    }

    bool addPacket(int source, int destination, int timestamp) { // O(log10(digits))
        string key = makeKey(source, destination, timestamp); // O(log10(digits))
        
        if(packetStore.find(key) != packetStore.end()) { // O(1)
            return false;
        }

        if(que.size() >= MAX_SIZE) { // O(1)
            forwardPacket();
        }

        packetStore[key] = {source, destination, timestamp}; // O(1)
        que.push(key); // O(1)
        destTimeMap[destination].push_back(timestamp); // O(1)

        return true;
    }

    
    vector<int> forwardPacket() {
        if(packetStore.empty()) { // O(1)
            return {};
        }

        string key = que.front(); 
        que.pop();

        vector<int> packet = packetStore[key];
        packetStore.erase(key);

        int D = packet[1];
        destTimeMap[D].erase(destTimeMap[D].begin()); // O(k)  -> k is size of vector

        return packet;
    }
    
    int getCount(int destination, int startTime, int endTime) {
        auto it = destTimeMap.find(destination);

        if(it == destTimeMap.end() || it -> second.empty()) {
            return 0;
        }

        int i = lower_bound(it -> second.begin(), it -> second.end(), startTime) - it -> second.begin(); // O(log(size of vector))
        int j = upper_bound(it -> second.begin(), it -> second.end(), endTime) - it -> second.begin(); // O(log(size of vector))

        return j - i;
    }
};

/**
 * Your Router object will be instantiated and called as such:
 * Router* obj = new Router(memoryLimit);
 * bool param_1 = obj->addPacket(source,destination,timestamp);
 * vector<int> param_2 = obj->forwardPacket();
 * int param_3 = obj->getCount(destination,startTime,endTime);
 */
