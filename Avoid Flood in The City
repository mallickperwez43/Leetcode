class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        int n = rains.size();

        unordered_map<int, int> mp; // Lake -> first day rain
        set<int> st; // zero days index storing

        vector<int> result(n, 1);

        for(int i = 0; i < n; i++) {
            int lake = rains[i];

            if(lake == 0) {
                st.insert(i); // ith day -> empty day
            }
            else {
                result[i] = -1;
                // also check if this lake already contains water -
                // check if we can dry it up, else flood
                if(mp.count(lake)) { // it had rained already
                    auto it = st.lower_bound(mp[lake]);

                    if(it == st.end()) { // wont be able to dry -> flood
                        return {};
                    }

                    // Day on which no rain
                    int day = *it;
                    result[day] = lake;
                    st.erase(it);
                }

                mp[lake] = i; // ith day mein rate
            }
        }

        return result;
    }
};

// TC : O(nlogn)
// SC : O(n)
