class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        if(numerator == 0) 
            return "0";
        
        string result = "";
        if(((long long)numerator * (long long)denominator) < 0) {
            result += "-";
        }

        long long absNumerator = labs(numerator);
        long long absDenominator = labs(denominator);

        long long integerDiv = absNumerator / absDenominator;

        result += to_string(integerDiv); // O(log10(integerDiv)) 

        long long remain = absNumerator % absDenominator;
        if(remain == 0) {
            return result;
        }

        result += ".";

        unordered_map<int, int> mp; // reaminder -> position to place bracket
        
        // 0 <= remain < absDenominator
        // TC : O(absDenominator + length) 
        while(remain != 0) {
            if(mp.count(remain)) {
                result.insert(mp[remain], "("); // O(length)
                result += ")";
                break;
            }

            mp[remain] = result.length(); 

            remain *= 10;
            int digit = remain / absDenominator;
            result += to_string(digit); // O(1)

            remain = remain % absDenominator;
        }

        return result;
    }
};

// TC : O(log10(integerDiv) + absDenominator + length)
// SC : O(remain)
