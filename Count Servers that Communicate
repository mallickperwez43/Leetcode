// Precomputation / Preprocessing

class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<int> indexRowCount(m, 0);
        vector<int> indexColCount(n, 0);
        
        // preprocessing / precomputation
        for(int row = 0; row < m; row++) {
            for(int col = 0; col < n; col++) {
                if(grid[row][col] == 1) { // found a server at grid[row][col]
                    indexRowCount[row] += 1;
                    indexColCount[col] += 1;
                }
            }          
        }

        int resultServers = 0;
        for(int row = 0; row < m; row++) {
            for(int col = 0; col < n; col++) {
                if(grid[row][col] == 1 && (indexRowCount[row] > 1 || indexColCount[col] > 1)) {
                    resultServers++;
                }
            }
        }

        return resultServers;
    }  
};

// TC : O(m * n * 2) ~ O(m * n)
// SC : O(m + n)


// Another way to code

class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<int> colServerCount(n, 0);
        vector<int> rowAloneServerCol(m, -1);

        int resultServers = 0;
        for(int row = 0; row < m; row++) {
            int countServersInRow = 0;
            for(int col = 0; col < n; col++) {
                if(grid[row][col] == 1) {
                    countServersInRow += 1;
                    colServerCount[col]++;
                    rowAloneServerCol[row] = col;
                }
            } 

            if(countServersInRow > 1) {
                resultServers += countServersInRow;
                rowAloneServerCol[row] = -1; // no alone server in this row
            }
        }
        
        // check alone servers in each row
        for(int row = 0; row < m; row++) {
            if(rowAloneServerCol[row] != -1) {
                int col = rowAloneServerCol[row];
                if(colServerCount[col] > 1) {
                    resultServers += 1;
                }
            }
        }

        return resultServers;
    }  
};

// TC : O(m * n + m) ~ O(m * n)
// SC : O(m + n)

