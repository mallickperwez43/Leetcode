// Recursion + memoization

class Solution {
public:
    
    int solve(int i, int j, int m, int n, vector<vector<int>>& dp) {

        if(i >= m || j >= n) 
            return 0;
        
        if(i == m - 1 && j == n - 1)
            return 1;
        
        if(dp[i][j] != -1) 
            return dp[i][j];

        int right = solve(i, j + 1, m, n, dp);
        int down  = solve(i + 1, j, m, n, dp);

        return dp[i][j] = right + down;
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return solve(0, 0, m, n, dp);
    }
};


// Bottom Up

class Solution {
public:

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 1));
        // dp[i][j] -> unique ways to reach (i, j) from (0, 0)
        
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                int left = dp[i][j - 1];
                int up   = dp[i - 1][j];

                dp[i][j] = left + up;
            }
        }

        return dp[m - 1][n - 1];
    }
};
