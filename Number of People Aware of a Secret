// Recursion -- TLE

class Solution {
public:
    int M = 1e9 + 7;
    
    // this will return total number of people who know secret on day "day" 
    int solve(int day, int delay, int forget) {
        if(day == 1)
            return 1;
        
        int result = 0;
        for(int prev = day - forget + 1; prev <= day - delay; prev++) {
            if(prev > 0) {
                result = (result + solve(prev, delay, forget)) % M;
            }
        }

        return result;
    }

    int peopleAwareOfSecret(int n, int delay, int forget) {
        int total = 0;

        for(int day = n - forget + 1; day <= n; day++) {
            if(day > 0) {
                total = (total + solve(day, delay, forget)) % M;
            }
        }    

        return total;
    }
};


// Recursion + Memoization

class Solution {
public:
    int M = 1e9 + 7;
    
    // this will return total number of people who know secret on day "day" 
    int solve(int day, int delay, int forget, vector<int>& dp) {
        if(day == 1)
            return 1;
        
        if(dp[day] != -1) 
            return dp[day];

        int result = 0;
        for(int prev = day - forget + 1; prev <= day - delay; prev++) {
            if(prev > 0) {
                result = (result + solve(prev, delay, forget, dp)) % M;
            }
        }

        return dp[day] = result;
    }

    int peopleAwareOfSecret(int n, int delay, int forget) {
        int total = 0;
        vector<int> dp(n + 1, -1);

        for(int day = n - forget + 1; day <= n; day++) {
            if(day > 0) {
                total = (total + solve(day, delay, forget, dp)) % M;
            }
        }    

        return total;
    }
};


// Bottom Up

class Solution {
public:
    int M = 1e9 + 7;

    int peopleAwareOfSecret(int n, int delay, int forget) {
        vector<int> dp(n + 1);
        // dp[day] = total number of people who know secret on day "day" 
        
        dp[1] = 1;

        for(int day = 2; day <= n; day++) {
            long long count = 0;
            for(int prev = day - forget + 1; prev <= day - delay; prev++) {
                if(prev > 0) {
                    count = (count + dp[prev]) % M;
                }
            }

            dp[day] = count;
        }
        
        int result = 0;

        for(int day = n - forget + 1; day <= n; day++) {
            if(day > 0) {
                result = (result + dp[day]) % M;
            }
        }    

        return result;
    }
};


// Bottom Up - Sliding Window optimized

class Solution {
public:
    int M = 1e9 + 7;

    int peopleAwareOfSecret(int n, int delay, int forget) {
        vector<int> dp(n + 1);
        // dp[day] = total number of people who know secret on day "day" 
        
        dp[1] = 1;
        
        int count = 0; // window sum of range[day - forget + 1, day - delay]
        for(int day = 2; day <= n; day++) {
            if(day - delay > 0) {
                count = (count + dp[day - delay]) % M;
            }

            if(day - forget > 0) {
                count = (count - dp[day - forget] + M) % M;
            }

            dp[day] = count;
        }
        
        int result = 0;

        for(int day = n - forget + 1; day <= n; day++) {
            if(day > 0) {
                result = (result + dp[day]) % M;
            }
        }    

        return result;
    }
};

// TC : O(n)
// SC : O(n)
