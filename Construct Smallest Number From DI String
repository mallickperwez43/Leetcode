// BRUTE FORCE
class Solution {
public:
    
    bool matchesPattern(string& num, string& pattern) {
        for(int i = 0; i < pattern.length(); i++) {
            if((pattern[i] == 'I' && num[i] > num[i + 1]) || 
                (pattern[i] == 'D' && num[i] < num[i + 1])) {
                return false;
            }
        }

        return true; 
    }

    string smallestNumber(string pattern) {
        int n = pattern.length();
        string num = "";
        
        for(int i = 1; i <= n + 1; i++) {
            num.push_back(i + '0');
        }

        while(!matchesPattern(num, pattern)) {
            next_permutation(num.begin(), num.end());
        }

        return num;
    }
};

// TC : O((n + 1)! * n)
// SC : O(n) -> ans string


// OPTIMAL
class Solution {
public:
    string smallestNumber(string pattern) {
        int n = pattern.length();

        string num = ""; // (n + 1)

        int counter = 1;
        stack<char> st;

        for(int i = 0; i <= n; i++) {
            st.push(counter + '0');
            counter++;

            if(i == n || pattern[i] == 'I') {
                while(!st.empty()) {
                    num += st.top();
                    st.pop();
                }
            }
        }

        return num;
    }
};

// TC : O(2 * (n + 1)) ~ O(n)
// SC : O(n + 1) ~ O(n)
