// Recursion + Memoization

class Solution {
public:
    
    int n;
    int K;
    
    int solve(int i, vector<int>& energy, vector<int>& dp) {
        if(i >= n) {
            return 0;
        }

        if(dp[i] != INT_MIN) {
            return dp[i];
        }

        return dp[i] = energy[i] + solve(i + K, energy, dp);
    }

    int maximumEnergy(vector<int>& energy, int k) {
        n = energy.size();
        K = k;
        
        vector<int> dp(n, INT_MIN);  

        int maxEnergy = INT_MIN;

        for(int i = 0; i < n; i++) {
            maxEnergy = max(maxEnergy, solve(i, energy, dp));
        }

        return maxEnergy;
    }
};


// Bottom Up

class Solution {
public:
    int maximumEnergy(vector<int>& energy, int k) {
        int n = energy.size();
        
        vector<int> dp(n, 0);
        // dp[i] = max energy if we start from index i  

        for(int i = n - 1; i >= 0; i--) {
            dp[i] = energy[i] + (i + k < n ? dp[i + k] : 0);
        }

        return *max_element(dp.begin(), dp.end());
    }
};
