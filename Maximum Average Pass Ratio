class Solution {
public:
    #define P pair<double, int> 
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        int n = classes.size();

        priority_queue<P> pq; // maxHeap -- // {maxDelta, classIdx}

        for(int i = 0; i < n; i++){
            double current_PR = (double) classes[i][0] / classes[i][1];
            double new_PR = (double)(classes[i][0] + 1) / (classes[i][1] + 1); // assigning one student to push delta in the heap
            double delta = new_PR - current_PR;
            pq.push(make_pair(delta, i));
        }

        while(extraStudents--){ // O(k)
            auto cur = pq.top(); // O(logn)
            pq.pop();

            double delta = cur.first;
            int idx      = cur.second;

            classes[idx][0]++; // increment total passing students in the class
            classes[idx][1]++; // increment total students in the class
            
            double current_PR = (double)classes[idx][0] / classes[idx][1];
            double new_PR = (double)(classes[idx][0] + 1) / (classes[idx][1] + 1);
            double newUpdatedDelta = new_PR - current_PR; // updated delta for class idx
            pq.push(make_pair(newUpdatedDelta, idx)); // O(logn)
        }

        double result = 0.0;
        for(int i = 0; i < n; i++){
            result += (double)classes[i][0] / classes[i][1];
        }

        return result / n;
    }
};

// TC : O(n + extraStudents * logn)
// SC : O(n)
