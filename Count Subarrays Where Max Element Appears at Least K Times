// Sliding Window

class Solution {
public:
    long long countSubarrays(vector<int>& nums, int k) {
        int maxEl = *max_element(nums.begin(), nums.end());

        int n = nums.size();
        int i = 0;
        int j = 0;

        long long result = 0;
        int countMax = 0;

        while(j < n) {
            if(nums[j] == maxEl) {
                countMax++;
            }

            while(countMax >= k) {
                result += (n - j); // baki sab aage wale bhi ending points ho sakte valid subarray ke

                if(nums[i] == maxEl) {
                    countMax--;
                }
                i++;
            }

            j++;
        }

        return result;
    }
};


// Without sliding window -> track indices of last max el index

class Solution {
public:
    long long countSubarrays(vector<int>& nums, int k) {
        int maxEl = *max_element(nums.begin(), nums.end());

        int n = nums.size();

        long long result = 0;
        
        vector<int> maxIndices;

        for(int i = 0; i < n; i++) {
            if(nums[i] == maxEl) {
                maxIndices.push_back(i);
            }

            int size = maxIndices.size();

            if(size >= k) {
                int last_i = maxIndices[size - k];
                result += (last_i + 1);
            }
        }

        return result;
    }
};
