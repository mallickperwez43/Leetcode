class Solution {
public:
    
    bool isPalindrome(string& s) {
        int i = 0;
        int j = s.length() - 1;

        while(i <= j) {
            if(s[i] != s[j])
                return false;
            
            i++;
            j--;
        }

        return true;
    }

    string convertToBaseK(long long num, int k) {
        if(num == 0) 
            return "0";
        
        string result = "";
        while(num > 0) {
            result += to_string(num % k);
            num /= k;
        }

        return result;
    }
     
    long long kMirror(int k, int n) {
        long long sum = 0;
        int L = 1; // create L lenght palindromes

        while(n > 0) {
            int half_length = (L + 1) / 2;

            long long min_num = pow(10, half_length - 1);
            long long max_num = pow(10, half_length) - 1;

            for(int num = min_num; num <= max_num; num++) {
                string first_half  = to_string(num);
                string second_half = first_half;
                reverse(second_half.begin(), second_half.end());

                string pal = "";
                if(L % 2 == 0) { // even length palindrome
                    pal = first_half + second_half;
                }
                else { // odd length palindrome
                    pal = first_half + second_half.substr(1);
                }

                long long pal_num = stoll(pal);

                string baseKPal = convertToBaseK(pal_num, k);

                if(isPalindrome(baseKPal)) {
                    sum += pal_num;
                    n--; // found one k mirror num
                    if(n == 0)
                        break;
                }
            }

            L++;
        }

        return sum;
    }
};
